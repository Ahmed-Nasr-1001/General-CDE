@using ACC.ViewModels.WorkflowVM
@model List<FolderWithDocumentsVM>

<style>
    .tree {
        list-style: none;
        padding: 0;
        font-family: system-ui;
    }

        .tree ul {
            list-style: none;
            padding-left: 20px;
            margin: 4px 0;
        }

        .tree li {
            margin: 4px 0;
        }

        .tree input[type="checkbox"] {
            appearance: none;
            width: 16px;
            height: 16px;
            border: 2px solid #d1d5db;
            border-radius: 50%;
            margin-right: 8px;
            position: relative;
            cursor: pointer;
        }

            .tree input[type="checkbox"]:checked {
                background: #22c55e;
                border-color: #22c55e;
            }

                .tree input[type="checkbox"]:checked::after {
                    content: '✓';
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    color: white;
                    font-size: 10px;
                    font-weight: bold;
                }

    .folder-label {
        font-weight: 600;
        color: #374151;
        padding: 4px 8px;
    }

        .folder-label:before {
            content: '📁 ';
        }

        .folder-label.expanded:before {
            content: '📂 ';
        }

    .doc-label {
        color: #6b7280;
        font-size: 14px;
        padding: 4px 8px;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s;
    }

        .doc-label:hover {
            background: #f8fafc;
        }

        .doc-label:before {
            content: '📄 ';
        }

    input:checked + .doc-label {
        background: #f0fdf4;
        color: #166534;
    }

    .collapsed {
        display: none;
    }

    .toggle-btn {
        background: none;
        border: none;
        font-size: 12px;
        margin-right: 4px;
        cursor: pointer;
        color: #6b7280;
    }

        .toggle-btn:hover {
            color: #374151;
        }
</style>

<script>
    function toggleFolder(btn) {
        const li = btn.closest('li');
        const children = li.querySelector(':scope > ul');
        const label = li.querySelector('.folder-label');

        if (children) {
            children.classList.toggle('collapsed');
            btn.textContent = children.classList.contains('collapsed') ? '▶' : '▼';
            label.classList.toggle('expanded', !children.classList.contains('collapsed'));
        }
    }
</script>

<ul class="tree">
    @foreach (var folder in Model)
    {
        <li>
            @if ((folder.Children != null && folder.Children.Any()) || (folder.Documents != null && folder.Documents.Any()))
            {
                <button type="button" class="toggle-btn" onclick="toggleFolder(this)">▼</button>
            }
            <span class="folder-label expanded">@folder.Name</span>
            @if (folder.Documents != null && folder.Documents.Any())
            {
                <ul>
                    @foreach (var doc in folder.Documents)
                    {
                        <li>
                            <input type="checkbox" name="SelectedDocumentIds" value="@doc.Id" id="doc_@doc.Id" />
                            <label for="doc_@doc.Id" class="doc-label">@doc.Name</label>
                        </li>
                    }
                </ul>
            }
            @if (folder.Children != null && folder.Children.Any())
            {
                @Html.Partial("_FolderWithDocTree", folder.Children)
            }
        </li>
    }
</ul>