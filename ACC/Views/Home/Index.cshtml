@model List<ACC.ViewModels.DashboardProjectCardVM.DashboardProjectCardVM>

@using System.Text.Json

@{
    ViewData["Title"] = "Projects Dashboard";
    Layout = "_Layout";
}

<!-- Bootstrap & Chart.js CDN -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container mt-4">
    <h2 class="text-center mb-4">Projects Dashboard</h2>

    <div class="row">
        @foreach (var project in Model)
        {
            <div class="col-md-4 mb-4">
                <div class="card shadow border-0 h-100">
                    <div class="card-body">
                        <h5 class="card-title text-primary">@project.Name</h5>
                        <h6 class="card-subtitle mb-2 text-muted">#@project.ProjectNumber</h6>
                        <p class="card-text">
                            <strong>Created:</strong> @project.CreationDate?.ToShortDateString() <br />
                            <strong>Status:</strong> @(project.IsArchived ? "Archived" : "Active") <br />
                            <strong>Members:</strong> @project.MembersCount <br />
                            <strong>Issues:</strong> @project.IssueCount <br />
                            <strong>Reviews:</strong> @project.ReviewCount
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>

    <hr class="my-5" />

    <div class="mt-5">
        <h4 class="text-center mb-3">Project Stats Comparison</h4>
        <canvas id="projectStatsChart" height="200"></canvas>
    </div>
</div>

@section Scripts {
    <script>
        const projectNames = @Html.Raw(JsonSerializer.Serialize(Model.Select(p => p.Name)));
        const memberCounts = @Html.Raw(JsonSerializer.Serialize(Model.Select(p => p.MembersCount)));
        const reviewCounts = @Html.Raw(JsonSerializer.Serialize(Model.Select(p => p.ReviewCount)));
        const issueCounts = @Html.Raw(JsonSerializer.Serialize(Model.Select(p => p.IssueCount)));

        const ctx = document.getElementById('projectStatsChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: projectNames,
                datasets: [
                    {
                        label: 'Members',
                        data: memberCounts,
                        backgroundColor: 'rgba(54, 162, 235, 0.7)'
                    },
                    {
                        label: 'Reviews',
                        data: reviewCounts,
                        backgroundColor: 'rgba(255, 206, 86, 0.7)'
                    },
                    {
                        label: 'Issues',
                        data: issueCounts,
                        backgroundColor: 'rgba(255, 99, 132, 0.7)'
                    }
                ]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                plugins: {
                    legend: { position: 'top' },
                    title: {
                        display: true,
                        text: 'Comparison of Members, Reviews, and Issues per Project'
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>
}
