@using ACC.ViewModels.ProjectVMs
@using Helpers;

@model List<DisplayProjectsVM>
@{
	Layout = "_Layout";
	var CurrentUserId = UserManager.GetUserId(User);
	int pageSize = 5;
	int currentPage = Convert.ToInt32(ViewBag.CurrentPage ?? 1);
	int totalPages = Convert.ToInt32(ViewBag.TotalPages ?? 1);
	bool showArchived = ViewBag.ShowArchived;
	int totalItems = Convert.ToInt32(ViewBag.TotalItems ?? Model.Count);
	string srchText = Context.Request.Query["srchText"];
}

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="csrf-token" content="@ViewData["CSRFToken"]">
	<title>Projects</title>
	<link href="/css/site.css" rel="stylesheet" />
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
	<style>

		.custom-notification {
			position: fixed;
			top: 20px;
			right: 20px;
			padding: 15px;
			background-color: #28a745;
			color: white;
			border-radius: 5px;
			display: none;
			z-index: 1000;
		}

		.custom-notification-delete {
			position: fixed;
			top: 20px;
			right: 20px;
			padding: 15px;
			background-color: red;
			color: white;
			border-radius: 5px;
			display: none;
			z-index: 1000;
		}


		body {
			font-family: 'Roboto', sans-serif;
			background-color: #f8f9fa;
		}

		.header-div {
			margin-top: 10px;
			margin-bottom: 20px;
		}

		.nav-links {
			border-bottom: 1px solid rgb(220, 220, 220);
			margin-bottom: 20px;
		}

			.nav-links a {
				margin-right: 20px;
				color: #666;
				text-decoration: none;
				padding-bottom: 5px;
				padding-top: 5px;
				padding-left: 5px;
				padding-right: 5px;
				display: inline-block;
				font-weight: 500;
				border-bottom: 3px solid transparent;
				transition: all 0.2s ease;
			}

				.nav-links a:hover {
					color: #007bff;
				}

				.nav-links a.active {
					color: #007bff !important;
					border-bottom: 3px solid #007bff;
					font-weight: 600;
				}

		.table-container {
			min-height: 400px;
			max-height: 400px; /* optional, to add scroll if too long */
			overflow-y: auto;
		}

		.table {
			width: 100%;
			min-width: 800px;
			table-layout: auto;
			color: #333;
			border-collapse: separate;
			border-spacing: 0;
			cursor: pointer;
		}

			.table th,
			.table td {
				padding: 12px 15px;
				text-align: left;
				vertical-align: middle;
				border-bottom: 1px solid #ddd;
			}

			.table th {
				background-color: #f8f9fa;
				font-weight: 500;
				color: #333;
			}

			.table tbody tr:hover {
				background-color: #f1f1f1;
			}

		.action-column {
			position: relative;
		}

			.action-column .dropdown-toggle {
				background: none;
				border: none;
				color: #666;
				cursor: pointer;
			}

				.action-column .dropdown-toggle:hover {
					color: #007bff;
				}

		.action-menu {
			position: absolute;
			z-index: 1000;
			right: 0;
			top: 100%;
			min-width: 120px;
			box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
		}

		.dropdown-item {
			padding: 8px 12px;
			color: #333;
			text-decoration: none;
			display: block;
		}

			.dropdown-item:hover {
				background-color: #f8f9fa;
			}

		.search-container {
			position: relative;
			display: inline-block;
			width: 300px;
		}

		.pagination .btn {
			margin: 0 2px;
		}
	</style>

</head>
<body>
	<div class="d-flex">
		<div class="container-fluid p-4">
			<div class="header-div">
				<h2>Projects</h2>
			</div>

			<div id="custom-notification" class="custom-notification">
				<span id="notification-message"></span>
			</div>
			<div id="custom-notification-delete" class="custom-notification-delete">
				<span id="notification-message-delete"></span>
			</div>

			<div class="nav-links mb-3">
				<a href="@Url.Action("Index", new { showArchived = false })" class="@(showArchived == false ? "active" : "")">Active</a>
				<a href="@Url.Action("Index", new { showArchived = true })" class="@(showArchived == true ? "active" : "")">Archived</a>

			</div>

			@if (UserRoleService.HasGlobalAccess(CurrentUserId, GlobalAccessLevels.AccountAdmin))
			{
				<div class="d-flex justify-content-between button-group mb-3">
					<div>
						<button class="btn btn-primary me-2" data-bs-toggle="modal" data-bs-target="#addProjectModal">+ Create Project</button>
						<i class="fas fa-info-circle" style="color: #666;"></i>
					</div>
					<form action="/Project/Index" method="get" class="d-flex">
						<input type="hidden" name="showArchived" value="@showArchived" />
						<div class="search-container">
							<input type="text" class="form-control" name="srchText" placeholder="Search" value="@srchText" />
						</div>
						<button type="submit" class="btn btn-primary ms-2" style="height:40px;">Search</button>
					</form>
				</div>
			}

			<div class="table-container">
				<table class="table table-hover">
					<thead>
						<tr>
							<th>Name</th>
							<th>Number</th>
							<th>Project Type</th>
							<th>Project Value</th>
							<th>Start Date</th>
							<th>End Date</th>
							<th>Creation Date</th>
							@if (UserRoleService.HasGlobalAccess(CurrentUserId, GlobalAccessLevels.AccountAdmin))
							{
								<th class="action-column">Actions</th>
							}
						</tr>
					</thead>
					<tbody>
						@if (Model == null || !Model.Any())
						{
							<tr>
								<td colspan="8" class="text-center">No projects found.</td>
							</tr>
						}
						else
						{
							@foreach (var item in Model)
							{
								<tr data-project-id="@item.id" class="project-row">
									<td>@item.Name</td>
									<td>@item.ProjectNumber</td>
									<td>@Enum_Helper.GetDescription(item.ProjectType)</td>
									<td>@item.ProjectValue?.ToString("N2")</td>
									<td>@item.StartDate?.ToString("MM/dd/yyyy")</td>
									<td>@item.EndDate?.ToString("MM/dd/yyyy")</td>
									<td>@item.CreationDate?.ToString("MM/dd/yyyy")</td>
									@if (UserRoleService.HasGlobalAccess(CurrentUserId, GlobalAccessLevels.AccountAdmin))
									{

										<td>
											<div class="action-btn">
												<button class="btn btn-light btn-sm toggle-menu">
													<i class="bi bi-three-dots-vertical"></i>
												</button>
												<div class="action-menu">
													@if (showArchived == false)
													{
														<button class="archive-btn" data-id="@item.id">Archive</button>
														<button class="delete-btn" data-id="@item.id">Delete</button>
													}
													else
													{
														<button class="restore-btn" data-id="@item.id">Restore</button>

													}

												</div>
											</div>
										</td>

									}
								</tr>
							}
						}
					</tbody>
				</table>
			</div>

			<!-- Pagination + Count -->
			<div class="d-flex justify-content-between align-items-center mt-3">
				<p class="mb-0">Showing @((currentPage - 1) * pageSize + 1) to @(Math.Min(currentPage * pageSize, Model.Count + ((currentPage - 1) * pageSize))) of @((ViewBag.TotalItems ?? Model.Count)) projects</p>

				<div class="pagination d-flex gap-2">
					<a class="btn btn-light @(currentPage == 1 ? "disabled" : "")" href="@Url.Action("Index", new { page = currentPage - 1, srchText = srchText, showArchived = showArchived })">Previous</a>

					@for (int i = 1; i <= totalPages; i++)
					{
						<a href="@Url.Action("Index", new { page = i, srchText = srchText, showArchived = showArchived })"
						   class="btn @(i == currentPage ? "btn-primary" : "btn-light")">
							@i
						</a>
					}

					<a class="btn btn-light @(currentPage == totalPages ? "disabled" : "")" href="@Url.Action("Index", new { page = currentPage + 1, srchText = srchText, showArchived = showArchived })">Next</a>
				</div>
			</div>

			<partial name="PartialViews/_AddProjectPartialView" model="new AddProjectVM()" />
		</div>
	</div>

	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.5/jquery.validate.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js"></script>
	<script>

		// Your existing code continues here...
		$(document).on("click", ".project-row", function (e) {
			if (!$(e.target).closest(".action-btn").length) {
				var projectId = $(this).data("project-id");
				window.location.href = "/ProjectMembers/Index?ProjectId=" + projectId;
			}
		});

			$(document).ready(function () {
				$(document).on("click", ".project-row", function (e) {
					if (!$(e.target).closest(".action-btn").length) {
						var projectId = $(this).data("project-id");
						window.location.href = "/ProjectMembers/Index?ProjectId=" + projectId;
					}
				});

				function showNotification(message) {
					$("#notification-message").text(message);
					$("#custom-notification")
						.fadeIn(400)
						.delay(3000)
						.fadeOut(1000);
				}

				function showNotification_delete(message) {
					$("#notification-message-delete").text(message);
					$("#custom-notification-delete")
						.fadeIn(400)
						.delay(3000)
						.fadeOut(1000);
				}

				$(document).on("submit", "#addProjectForm", function (event) {
					event.preventDefault();

					$.ajax({
						url: "/Project/AddProject",
						type: "POST",
						data: $(this).serialize(),
						success: function (response) {
							if (!response.success) {
								$("#addProjectModal .modal-body").html($(response).find(".modal-body").html());
							} else {
								$("#addProjectModal").modal("hide");
								showNotification("The project is successfully created!");
								setTimeout(function () {
									location.reload();
								}, 500);
							}
						},
						error: function (xhr, status, error) {
							console.error("AJAX Error:", error);
							alert("Something went wrong!");
						}
					});
				});

					  $(document).on("click", ".toggle-menu", function (e) {
					e.stopPropagation();
					var $menu = $(this).siblings(".action-menu");
					$(".action-menu").not($menu).hide();
					$menu.toggle();
				});

				$(document).on("click", function (e) {
					if (!$(e.target).closest(".action-btn").length) {
						$(".action-menu").hide();
					}
				});




				$(document).on("click", ".delete-btn", function (e) {
					e.preventDefault();

					var projectId = $(this).data("id");

					if (confirm("Are you sure you want to delete this project?")) {
						$.ajax({
							url: "/Project/Delete/" + projectId,
							type: "POST",
							success: function () {
								showNotification_delete("The project is successfully deleted");
								setTimeout(function () {
									location.reload();
								}, 500);
							},
							error: function () {
								alert("Error deleting project.");
							}
						});
					}
				});

				$(document).on("click", ".archive-btn", function (e) {
					e.preventDefault();
					var projectId = $(this).data("id");
					$.ajax({
						url: "/Project/Archive/" + projectId,
						type: "POST",
						success: function () {
							location.reload();
						},
						error: function () {
							alert("Error archiving project.");
						}
					});
				});

				$(document).on("click", ".restore-btn", function (e) {
					e.preventDefault();
					var projectId = $(this).data("id");
					$.ajax({
						url: "/Project/Restore/" + projectId,
						type: "POST",
						success: function () {
							location.reload();
						},
						error: function () {
							alert("Error restoring project.");
						}
					});
				});
			});
	</script>

	<script>
		$.validator.addMethod("greaterthanstart", function (value, element, param) {
			var startDate = $(param).val();
			if (!startDate || !value) return true; // let Required handle it
			return new Date(value) > new Date(startDate);
		}, "End date must be greater than the start date.");

		$.validator.unobtrusive.adapters.add("greaterthanstart", ["other"], function (options) {
			options.rules["greaterthanstart"] = "#" + options.params.other;
			options.messages["greaterthanstart"] = options.message;
		});
	</script>

	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDqbWUXIAolPajv3pLIleGfeg1RE0i6FjA"></script>

	<script>
		let map, marker;
		function updateLatLngDisplay(lat, lng) {
			$("#lat-display").text(lat.toFixed(6));
			$("#lng-display").text(lng.toFixed(6));
		}

		function reverseGeocodeWithNominatim(lat, lng) {
			const url = https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lng};
			fetch(url, {
				headers: {
					'User-Agent': 'YourAppName/1.0 (your@email.com)'
				}
			})
			.then(res => res.json())
			.then(data => {
				if (data && data.display_name) {
					const address = data.display_name;
					$("[name='Address']").val(address);
				} else {
					console.warn("⚠ No address found in response.");
				}
			})
			.catch(err => console.error("❌ Nominatim error:", err));
		}

		function initMap() {
			const mapEl = document.getElementById("map");

			if (!mapEl) {
				console.error("❌ Map container NOT found in DOM at initMap time.");
				return;
			}

			const h = $(mapEl).height();
			const w = $(mapEl).width();
			if (h === 0 || w === 0) {
				setTimeout(initMap, 300);
				return;
			}

			const defaultLoc = { lat: 30.0444, lng: 31.2357 };

			map = new google.maps.Map(mapEl, {
				zoom: 6,
				center: defaultLoc
			});

			marker = new google.maps.Marker({
				position: defaultLoc,
				map: map,
				draggable: true
			});

			$("#Latitude").val(defaultLoc.lat);
			$("#Longitude").val(defaultLoc.lng);
			updateLatLngDisplay(defaultLoc.lat, defaultLoc.lng);
			reverseGeocodeWithNominatim(defaultLoc.lat, defaultLoc.lng);

			map.addListener("click", function (e) {
				const lat = e.latLng.lat();
				const lng = e.latLng.lng();
				console.log("🖱 Map clicked:", lat, lng);
				marker.setPosition(e.latLng);
				$("#Latitude").val(lat);
				$("#Longitude").val(lng);
				updateLatLngDisplay(lat, lng);
				reverseGeocodeWithNominatim(lat, lng);
			});

			google.maps.event.trigger(map, 'resize');
			map.setCenter(marker.getPosition());
		}

		const modalEl = document.getElementById('addProjectModal');
		if (modalEl) {
			modalEl.addEventListener('shown.bs.modal', function () {
				setTimeout(() => {
					try {
						initMap();
					} catch (e) {
						console.error("💥 Error inside initMap:", e);
					}
				}, 300);
			});
		} else {
			console.warn("⚠ Modal element #addProjectModal not found.");
		}
	</script>



</body>
</html>