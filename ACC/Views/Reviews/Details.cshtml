@using ACC.ViewModels.ReviewsVM
@model List<DocumentUponAction>
@{
    Layout = "_ProjectLayout";

 }

<!DOCTYPE html>
<html>
<head>
    <title>Review Details</title>
    <link href="/css/site.css" rel="stylesheet" />
    <link rel="stylesheet" href="/css/Company.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

    <style>
        .modal-content {
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(0,0,0,0.2);
        }

        .selected {
            background-color: #f8d7da !important;
        }

        .form-check-input {
            margin-right: 8px;
        }

        .form-check-label {
            font-weight: normal;
        }

        .action-column {
            min-width: 140px;
        }

        .table th, .table td {
            vertical-align: middle;
        }

        .table th {
            background-color: #f0f0f0;
        }

        .container-fluid h2 {
            margin-bottom: 20px;
            font-weight: 600;
            color: #333;
        }

        .btn-primary {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <!-- Bootstrap Modal for File Viewer -->
    <div class="modal fade" id="fileModal" tabindex="-1" aria-labelledby="fileModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="fileModalLabel">File Viewer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="fileViewer" style="width: 100%; height: 500px;"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div id="loadingSpinner" class="d-none text-center my-3">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading file...</p>
    </div>

    <!-- Error Message Container -->
    <div id="errorMessage" class="d-none alert alert-danger" role="alert"></div>

    <div class="container-fluid p-4">
        <h2><i class="bi bi-journal-text me-2"></i>@ViewBag.ReviewName</h2>
        @if (TempData["Error"] != null)
             {
                 <div class="alert alert-warning">@TempData["Error"]</div>
             }

        <form  asp-controller="Reviews" asp-action="Submit" asp-route-ReviewId="@ViewBag.ReviewId" method="post" >
           
            <table class="table table-bordered table-hover shadow-sm">
                <thead class="table-light">
                    <tr>
                        <th>Name</th>
                        <th>Comment</th>
                        @if (ViewBag.CurrentUserId == ViewBag.Initiator)
                        {
                         <th>Final Status</th>

                        }
                        else
                        {
                        <th>Status</th>
                            
                        }
                     
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < Model.Count; i++)
                    {
                         <input type="hidden" name="[@i].Id" value="@Model[i].Id" />

                        <tr>
                            <td>@Model[i].Name</td>
                            <td>
                                <button type="button"
                                        class="btn btn-sm btn-outline-secondary open-comments-btn"
                                        data-document-id="@Model[i].Id"
                                        data-review-id="@ViewBag.ReviewId"
                                        data-step-order="@ViewBag.CurrentStepOrder">
                                    <i class="bi bi-chat-left-text"></i> Comments
                                </button>
                            </td>
                            @if (ViewBag.CurrentUserId == ViewBag.Initiator)
                            {
                                <td>@Model[i].State</td>
                            }
                            else
                            {
                                <td>
                                    <select class="form-select form-select-sm" asp-for="@Model[i].State">
                                        <option value="Approved">Approved</option>
                                        <option value="Rejected">Rejected</option>
                                        <option value="Pending">Pending</option>
                                    </select>
                                </td>
                            }
                         


                        </tr>
                    }
                </tbody>
            </table>

            @if (ViewBag.CurrentUserId != ViewBag.Initiator)
            {
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-send me-1"></i>Submit Review
                </button>
            }
        </form>
    </div>

    <!-- Modal Placeholder -->
    <div class="modal fade" id="commentsModal" tabindex="-1" aria-labelledby="commentsLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="commentsLabel">Comments</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="commentsModalBody">
                    <div class="text-center">Loading...</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<script>
    $(document).ready(function () {
        
        // Global variables
        let currentDocumentId = null;
        let currentReviewId = null;
        let currentStepOrder = null;
        let isSubmitting = false;
        let operationQueue = []; // Queue for operations to prevent conflicts

        // Function to process queued operations one by one
        function processQueue() {
            if (operationQueue.length === 0 || isSubmitting) {
                return;
            }
            
            const operation = operationQueue.shift();
            operation();
        }

        // Function to load comments
        function loadComments(documentId, reviewId, stepOrder, showLoading = true) {
            return new Promise((resolve, reject) => {
                if (showLoading) {
                    $("#commentsModalBody").html(`
                        <div class="text-center p-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 mb-0">Loading comments...</p>
                        </div>
                    `);
                }

                $.ajax({
                    url: "/Reviews/DocumentComments",
                    type: "GET",
                    data: { 
                        documentId: documentId, 
                        reviewId: reviewId, 
                        currentStepOrder: stepOrder 
                    },
                    timeout: 30000,
                    cache: false
                })
                .done(function (data) {
                    $("#commentsModalBody").html(data);
                    console.log('Comments loaded successfully');
                    resolve(data);
                })
                .fail(function (xhr, status, error) {
                    console.error('Error loading comments:', error);
                    $("#commentsModalBody").html(`
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle me-2"></i>
                            Error loading comments. Please try again.
                            <button class="btn btn-sm btn-outline-primary mt-2 d-block" onclick="retryLoadComments()">
                                <i class="bi bi-arrow-clockwise me-1"></i>Retry
                            </button>
                        </div>
                    `);
                    reject(error);
                });
            });
        }

        // Retry function
        window.retryLoadComments = function() {
            if (currentDocumentId && currentReviewId && currentStepOrder) {
                loadComments(currentDocumentId, currentReviewId, currentStepOrder);
            }
        };

        // When clicking "Comments" button
        $(".open-comments-btn").click(function () {
            currentDocumentId = $(this).data("document-id");
            currentReviewId = $(this).data("review-id");
            currentStepOrder = $(this).data("step-order");

            // Clear any pending operations for fresh start
            operationQueue = [];
            isSubmitting = false;

            $('#commentsModal').modal('show');
            
            // Load comments after modal is shown
            setTimeout(() => {
                loadComments(currentDocumentId, currentReviewId, currentStepOrder);
            }, 300);
        });

        // Handle comment form submission with proper queuing
        $(document).on('submit', '.comment-form', function (e) {
            e.preventDefault();
            
            // Add to queue instead of immediate execution
            const form = $(this);
            operationQueue.push(() => submitComment(form));
            processQueue();
        });

        // Function to submit comment with proper error handling
        function submitComment(form) {
            if (isSubmitting) {
                console.log('Already submitting, skipping...');
                return;
            }
            
            isSubmitting = true;
            
            const submitBtn = form.find("button[type=submit]");
            const originalBtnText = submitBtn.html();
            const formData = form.serialize();
            const actionUrl = form.attr('action');
            
            console.log('Submitting comment...', {
                url: actionUrl,
                data: formData
            });

            // Clear existing alerts
            $('.alert').fadeOut(150, function() { $(this).remove(); });

            // Disable button and show loading
            submitBtn.prop("disabled", true)
                     .html('<span class="spinner-border spinner-border-sm me-1"></span>Adding...');

            // Disable the form to prevent multiple submissions
            form.find('input, textarea, button').prop('disabled', true);

            $.ajax({
                url: actionUrl,
                type: "POST",
                data: formData,
                timeout: 45000, // Increased timeout for server processing
                cache: false,
                traditional: true
            })
            .done(function (response, textStatus, xhr) {
                console.log('Comment submitted successfully');
                
                // Show success message
                const successAlert = $(`
                    <div class="alert alert-success fade show mb-3">
                        <i class="bi bi-check-circle me-2"></i>Comment added successfully!
                    </div>
                `);
                $("#commentsModalBody").prepend(successAlert);
                
                // Wait for server to fully process before refreshing
                setTimeout(() => {
                    successAlert.fadeOut(300, function() { $(this).remove(); });
                    
                    // Reload comments to show updated list
                    loadComments(currentDocumentId, currentReviewId, currentStepOrder, false)
                        .then(() => {
                            console.log('Comments refreshed after submission');
                        })
                        .catch((error) => {
                            console.error('Error refreshing comments:', error);
                        })
                        .finally(() => {
                            // Reset submission state and process next in queue
                            isSubmitting = false;
                            setTimeout(processQueue, 500); // Small delay before next operation
                        });
                    
                }, 1200); // Give server time to commit to database
            })
            .fail(function (xhr, status, error) {
                console.error('Error submitting comment:', {
                    status: xhr.status,
                    statusText: xhr.statusText,
                    error: error,
                    responseText: xhr.responseText
                });

                let errorMessage = "Failed to add comment. ";
                
                // More specific error handling
                if (xhr.status === 0) {
                    errorMessage += "Connection lost. Check your internet.";
                } else if (xhr.status >= 400 && xhr.status < 500) {
                    errorMessage += "Client error. Please refresh and try again.";
                } else if (xhr.status >= 500) {
                    errorMessage += "Server error. Wait a moment and try again.";
                } else if (status === 'timeout') {
                    errorMessage += "Request took too long. Try again.";
                } else {
                    errorMessage += "Unexpected error occurred.";
                }

                const errorAlert = $(`
                    <div class="alert alert-danger fade show mb-3">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        ${errorMessage}
                        <br><small class="text-muted">Error ${xhr.status}: ${xhr.statusText}</small>
                    </div>
                `);
                $("#commentsModalBody").prepend(errorAlert);
                
                // Auto-remove error message
                setTimeout(() => {
                    errorAlert.fadeOut();
                }, 7000);
                
                // Reset state
                isSubmitting = false;
                setTimeout(processQueue, 1000); // Wait longer before retry
            })
            .always(function () {
                // Re-enable form controls
                form.find('input, textarea, button').prop('disabled', false);
                submitBtn.html(originalBtnText);
            });
        }

        // Clear state when modal is hidden
        $('#commentsModal').on('hidden.bs.modal', function () {
            currentDocumentId = null;
            currentReviewId = null;
            currentStepOrder = null;
            isSubmitting = false;
            operationQueue = []; // Clear pending operations
            console.log('Modal closed, all states cleared');
        });

        // Optional: Periodic refresh only when modal is visible and not busy
        setInterval(function() {
            if ($('#commentsModal').hasClass('show') && 
                currentDocumentId && 
                !isSubmitting && 
                operationQueue.length === 0) {
                
                console.log('Auto-refreshing comments...');
                loadComments(currentDocumentId, currentReviewId, currentStepOrder, false);
            }
        }, 180000); // Every 3 minutes when idle

    });
</script>

</body>
</html>
