@model List<ACC.ViewModels.DashboardProjectCardVM.DashboardProjectCardVM>
@using System.Text.Json

@{
    ViewData["Title"] = "Projects Dashboard";
    Layout = "_Layout";
}

<!-- Bootstrap & Chart.js CDN -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="container-fluid p-4 d-flex flex-column" style="height: 100%;">
    <h2>Projects Dashboard</h2>

    <div class="mb-5">
        <canvas id="projectStatsChart" style="max-height: 600px; width: 100%;"></canvas>
    </div>
</div>

@section Scripts {
    <script>
        const projects = @Html.Raw(JsonSerializer.Serialize(Model));

        const projectNames = projects.map(p => p.Name);
        const memberCounts = projects.map(p => p.MembersCount);
        const reviewCounts = projects.map(p => p.ReviewCount);
        const issueCounts = projects.map(p => p.IssueCount);

        const ctx = document.getElementById('projectStatsChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: projectNames,
                datasets: [
                    {
                        label: 'Members',
                        data: memberCounts,
                        backgroundColor: 'rgba(54, 162, 235, 0.7)'
                    },
                    {
                        label: 'Reviews',
                        data: reviewCounts,
                        backgroundColor: 'rgba(255, 206, 86, 0.7)'
                    },
                    {
                        label: 'Issues',
                        data: issueCounts,
                        backgroundColor: 'rgba(255, 99, 132, 0.7)'
                    }
                ]
            },
            options: {
                indexAxis: 'y',
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'top'
                    },
                    title: {
                        display: true,
                        text: 'Members, Reviews, and Issues per Project'
                    },
                    tooltip: {
                        callbacks: {
                            afterBody: function (context) {
                                const index = context[0].dataIndex;
                                const project = projects[index];
                                return [
                                    'Project #: ' + project.ProjectNumber,
                                    'Status: ' + (project.IsArchived ? 'Archived' : 'Active'),
                                    'Created: ' + (project.CreationDate ? project.CreationDate.split('T')[0] : 'N/A')
                                ];
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        },
                        title: {
                            display: true,
                            text: 'Count'
                        }
                    },
                    y: {
                        title: {
                            display: true,
                            text: 'Projects'
                        }
                    }
                }
            }
        });
    </script>
}
